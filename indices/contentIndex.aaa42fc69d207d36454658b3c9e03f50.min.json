{"/":{"title":"Sang Vo - Web Developer","content":"\n## About me\nHi, there 👋. My name is **Sang**. I am a developer with 3+ years experience specializing in the web development. Super nerd who loves Vim, Linux and enjoys to customize all of the development environment. Interested in devising a better problem-solving method for challenging tasks, and learning new technologies and tools if the need arises.\n\n## Get Started\n\n👉 Notes, see [Notes →](notes)\n\n👉 Today I Learned, see [TIL →](tils)\n","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":[]},"/notes/Create-a-large-file-on-Linux":{"title":"Create a large file on Linux","content":"\nSometimes we need to have a random file of given size. We can name some common examples such as\n\n-   Test the file upload functionality\n-   Test if the application is able to handle a large set of data\n\nOn Linux we can create an empty file of particular size with the `dd` command. The following command creates `sample.txt` file of `1GB`:\n\n```shell\n$ dd if=/dev/urandom of=sample.txt bs=1G count=1\n```\n\nThe file size is the result of `bs * count` in bytes.\n\nRef: https://getfrontend.tips/create-a-big-file-on-linux/","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["front-end-tips"]},"/notes/Rake-task-backup-database-rails":{"title":"Rake task backup database rails","content":"\n```ruby {title=\"mysql_tool.rake\"}\nnamespace :mysql_tool do\n  task backup: :environment do\n    backup_dir = Settings.dig(:mysql_tool, :backup_dir)\n    raise \"Not support environment #{Rails.env}\" unless backup_dir\n\n    FileUtils.mkdir_p backup_dir unless File.directory?(backup_dir)\n\n    time_zone_now = Time.zone.now.strftime(\"%Y%m%d%H%M%S\")\n    dump_file = \"#{backup_dir}/dump_data_#{time_zone_now}.sql\"\n    password_unzip = Settings.dig(:mysql_tool, :password_unzip)\n    dump_file_query(dump_file)\n    zip_exports(dump_file,password_unzip)\n    remove_outdated_dump_file(backup_dir)\n  end\n\n  private\n\n  def dump_file_query(dump_file)\n    config = Rails.configuration.database_configuration\n    dump_query = \"mysqldump\"\n    config[Rails.env].each do |key, value|\n      dump_query \u003c\u003c \" -u\\\"#{value}\\\"\" if key == \"username\"\n      dump_query \u003c\u003c \" -p\\\"#{value}\\\"\" if key == \"password\"\n      dump_query \u003c\u003c \" -h#{value}\" if key == \"host\"\n      dump_query \u003c\u003c \" #{value}\" if key == \"database\"\n      dump_query \u003c\u003c \" --ssl-ca=#{value}\" if key == \"sslca\"\n    end\n    unless system(\"#{dump_query} \u003e #{dump_file}\")\n      raise \"Can't dump #{dump_query}\"\n    end\n  end\n\n  def zip_exports(dump_file, password)\n    password_unzip = Zip::TraditionalEncrypter.new(password)\n    buffer = Zip::OutputStream.write_buffer(StringIO.new, password_unzip) do |stream|\n      stream.put_next_entry(\n        dump_file.split(\"/\").last,\n        nil, # comment\n        nil, # extra\n        Zip::Entry::DEFLATED,\n        Zlib::BEST_COMPRESSION,\n      )\n      stream.write open(dump_file).read\n    end\n    buffer.rewind\n    File.open(dump_file.ext(\"zip\"), \"wb\") {|f| f.write(buffer.string) }\n    File.truncate(dump_file, 0)\n    File.delete(dump_file)\n  end\n\n  def remove_outdated_dump_file(backup_dir)\n    regex_backup_time = /\\A.*dump_data_(?\u003cbackup_time\u003e\\d{14}).(sql|zip)\\z/\n    week_ago = 1.week.ago\n    Dir[\"#{backup_dir}/dump_data_*.sql\", \"#{backup_dir}/dump_data_*.zip\"].each do |file|\n      match_data = file.match(regex_backup_time)\n      backup_time = Time.zone.parse(match_data[:backup_time]) rescue nil\n      next if backup_time.nil? || backup_time \u003e week_ago\n\n      File.truncate(file, 0)\n      File.delete(file)\n    end\n  end\nend\n```\n","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["rails"]},"/tils/2023-03-23-eventbridge-start-stop-ec2-aurora-automation":{"title":"TIL: EventBridge start/stop aurora automation","content":"When you stop Amazon RDS instances (including Aurora), they are automatically started after 7 days. In [the aws doc](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html), you will find this notice.\n\n![You can stop a DB instance for up to seven days. If you don’t manually start your DB instance after seven days, your DB instance is automatically started so that it doesn’t fall behind any required maintenance updates.](https://miro.medium.com/v2/resize:fit:700/1*pb_zYwEwgtdGW_xHltFDgw.png)\n\n\n## For EC2\n\nCreate policy\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:StartInstances\",\n                \"ec2:StopInstances\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\nname:  `eventbridge_automation_ec2_policy`\n\n## For Aurora\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"RDSDescribe\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"rds:DescribeDBClusters\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        },\n        {\n            \"Sid\": \"RDSControl\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"rds:StartDBCluster\",\n                \"rds:StopDBCluster\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\nname: `eventbridge_automation_rds_policy`\n## EventBridge\n\nhttps://dev.to/aws-builders/easy-setup-for-ec2-stop-jobs-with-amazon-eventbridge-scheduler-4lpg","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["til"]},"/tils/2023-03-30-Make-file-for-docker-and-rails":{"title":"TIL: Makefile for docker and rails","content":"\n```sh {title=\"Makefile\"}\nbuild:\n  docker compose build\n\nsetup:\n  docker compose run --rm app bin/rails db:setup\n\nup:\n  docker compose up\n\nstop:\n  docker compose stop\n\nrestart_db:\n  docker compose run --rm app bin/rails db:drop\n  docker compose run --rm app bin/rails db:create\n  docker compose run --rm app bin/rails db:migrate\n  docker compose run --rm app bin/rails db:seed\n\nmigrate:\n  docker compose exec app bin/rails db:migrate\n\nrollback:\n  docker compose exec app bin/rails db:rollback\n\nseed:\n  docker compose exec app bin/rails db:seed\n\nc:\n  docker compose exec app bin/rails c\n\nt:\n  docker compose exec app bin/rails t\n\nroutes:\n  docker compose exec app bin/rails routes\n```\n\n```sh\n$ make build\n$ make setup\n$ make up\n```\n\nhttps://moviendo.me/makefile-for-docker-rails-applications.html","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["til"]},"/tils/2023-03-30-dockerize-rails-new-app":{"title":"TIL: Dockerize rails new app ","content":"Every time that I have to start a new project (Ruby, Rails, JS…) I always start [Docker](https://www.docker.com/) first! This means, I never install a single Gem or Package on my local machine.\n\nIt helps me to avoid conflicts with different versions of the same package, lost dependencies in the system and so on.\n\nEverything that I use for development on my laptop runs in a [Docker](https://www.docker.com/) container, even [Neovim](https://github.com/jferrer/neovim-dockerized).\n\nThis is an example of how to create, step by step, a [Ruby on Rails](http://rubyonrails.org/) API + [Postgres](https://www.postgresql.org/) and the only thing you need to follow is [Docker](https://www.docker.com/).\n\nSo let’s start:\n\n## Create the directory for the API\n\n```\n$ mkdir docker-compose-rails-api\n$ cd docker-compose-rails-api\n```\n\n## Create the Dockerfile\n\n```docker {hl_lines=\"2\" title=\"Dockerfile\"}\nFROM ruby:2.7.3\nLABEL Description=\"Docker Rails API Base\"\nWORKDIR /app\n\nRUN gem install bundler\n\nCMD exec bin/start.sh\n```\n\n## Create the Gemfile\n\n```ruby {title=\"Gemfile\"}\nsource \"https://rubygems.org\"\n\nruby \"2.7.3\"\ngem \"rails\", \"~\u003e 6.1.3.2\"\n```\n\n## Create the docker-compose.yml\n\n```yml {title=\"docker-compose.yml\"}\nversion: \"3\"\nservices:\n  api:\n    restart: on-failure\n    build: .\n    tty: true\n    stdin_open: true\n    volumes:\n      - .:/app\n      - bundle_cache:/usr/local/bundle\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n    environment:\n      DATABASE_URL: postgresql://postgres@db/api_development\n      TEST_DATABASE_URL: postgresql://postgres@db/api_test\n  db:\n    image: postgres:latest\n    volumes:\n      - ./docker/data-volume/postgresql:/var/lib/postgresql/data\n    ports:\n      - 5456:5432\n    environment:\n      POSTGRES_HOST_AUTH_METHOD: trust\nvolumes:\n  bundle_cache:\n```\n\n## Create a bin/start.sh file\n\n```sh {title=\"bin/start.sh\"}\nbundle check || bundle install\n\nif [ -f tmp/pids/server.pid ]; then\n  rm -f tmp/pids/server.pid\nfi\n\nbin/rails s -p 3000 -b 0.0.0.0\n```\n\n### And set permissions\n\n```sh\n$ chmod +x bin/start.sh\n```\n\n## Install Rails\n\n```sh\n$ docker-compose run api gem install rails -v 6.1.3.2\n```\n\n## Create the Rails API\n\n```sh\n$ docker-compose run api rails new . --api --force --database=postgresql --skip-bundle\n```\n\n## Replace content of config/database.yml with this:\n\n```yaml {title=\"config/database.yml\"}\nglobal: \u0026default\n    adapter: postgresql\n    pool: 5\n    url: \u003c%= ENV[\"DATABASE_URL\"] %\u003e\n\n  development:\n    \u003c\u003c: *default\n\n  test:\n    \u003c\u003c: *default\n    url: \u003c%= ENV[\"TEST_DATABASE_URL\"] %\u003e\n\n  production:\n    \u003c\u003c: *default\n```\n\n## Start the server\n\n```sh\n$ docker-compose up -d\n```\n\n## Create the database\n\n```sh\n$ docker-compose run api bin/rails db:create\n```\n\nhttps://moviendo.me/create-a-rails-api-postgres-with-docker-from-scratch-without-having-to-even-install-ruby-locally.html\n","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["til"]},"/tils/2023-04-10":{"title":"TIL: ","content":"\n\u003e [!important] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\n\u003e [!summary] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\n\u003e [!done] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker\n\n![[tils/images/obsidian-settings.png]]\n\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-\u003e\u003eJohn: Hello John, how are you?\n    loop Healthcheck\n        John-\u003e\u003eJohn: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \u003cbr/\u003eprevail!\n    John--\u003e\u003eAlice: Great!\n    John-\u003e\u003eBob: How about you?\n    Bob--\u003e\u003eJohn: Jolly good!\n```\n\n## Hello\n```mermaid\ngraph TD\n    0{\"BatchJob\\n{ stage: nil }\"}\n    0 --\u003e a[\"WorkJob]\\n{ step: a }\"]\n    0 --\u003e b[\"WorkJob]\\n{ step: b }\"]\n    0 --\u003e c[\"WorkJob]\\n{ step: c }\"]\n    a --\u003e 1\n    b --\u003e 1\n    c --\u003e 1\n    1{\"BatchJob\\n{ stage: 1 }\"}\n    1 --\u003e d[\"WorkJob]\\n{ step: d }\"]\n    1 --\u003e e[\"WorkJob]\\n{ step: e }\"]\n    e --\u003e f[\"WorkJob]\\n{ step: f }\"]\n    d --\u003e 2\n    f --\u003e 2\n    2{\"BatchJob\\n{ stage: 2 }\"}\n```\n\n```goat\n   _________________\n  ╱                 ╲                                                     ┌─────┐\n ╱ DO YOU UNDERSTAND ╲____________________________________________________│GOOD!│\n ╲ FLOW CHARTS?      ╱yes                                                 └──┬──┘\n  ╲_________________╱                                                        │\n           │no                                                               │\n  _________▽_________                    ______________________              │\n ╱                   ╲                  ╱                      ╲    ┌────┐   │\n╱ OKAY, YOU SEE THE   ╲________________╱ ... AND YOU CAN SEE    ╲___│GOOD│   │\n╲ LINE LABELED 'YES'? ╱yes             ╲ THE ONES LABELED 'NO'? ╱yes└──┬─┘   │\n ╲___________________╱                  ╲______________________╱       │     │\n           │no                                     │no                 │     │\n   ________▽_________                     _________▽__________         │     │\n  ╱                  ╲    ┌───────────┐  ╱                    ╲        │     │\n ╱ BUT YOU SEE THE    ╲___│WAIT, WHAT?│ ╱ BUT YOU JUST         ╲___    │     │\n ╲ ONES LABELED 'NO'? ╱yes└───────────┘ ╲ FOLLOWED THEM TWICE? ╱yes│   │     │\n  ╲__________________╱                   ╲____________________╱    │   │     │\n           │no                                     │no             │   │     │\n       ┌───▽───┐                                   │               │   │     │\n       │LISTEN.│                                   └───┬───────────┘   │     │\n       └───┬───┘                                ┌──────▽─────┐         │     │\n     ┌─────▽────┐                               │(THAT WASN'T│         │     │\n     │I HATE YOU│                               │A QUESTION) │         │     │\n     └──────────┘                               └──────┬─────┘         │     │\n                                                  ┌────▽───┐           │     │\n                                                  │SCREW IT│           │     │\n                                                  └────┬───┘           │     │\n                                                       └─────┬─────────┴─────┘\n                                                     ┌───────▽──────┐\n                                                     │LET'S GO DRING│\n                                                     └───────┬──────┘\n                                                   ┌─────────▽─────────┐\n                                                   │HEY, I SHOULD TRY  │\n                                                   │INSTALLING FREEBSD!│\n                                                   └───────────────────┘\n\n```\n","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["til"]},"/tils/Paste-an-image-from-the-clipboard":{"title":"Paste an image from the clipboard","content":"\n```js\ndocument.addEventListener('paste', function (evt) {\n    // Get the data of clipboard\n    const clipboardItems = evt.clipboardData.items;\n    const items = [].slice.call(clipboardItems).filter(function (item) {\n        // Filter the image items only\n        return item.type.indexOf('image') !== -1;\n    });\n    if (items.length === 0) {\n        return;\n    }\n\n    const item = items[0];\n    // Get the blob of image\n    const blob = item.getAsFile();\n});\n```\n\nFrom the image blob, we can preview it as you see in the live example below:\n\n```js\n// Assume that we have an `img` element\n// \u003cimg id=\"preview\" /\u003e\n\nconst imageEle = document.getElementById('preview');\nimageEle.src = URL.createObjectURL(blob);\n```\n\nor [upload](https://htmldom.dev/upload-files-with-ajax) it to the server with an Ajax request:\n\n```js\n// Create a new FormData\nconst formData = new FormData();\nformData.append('image', blob, 'filename');\n\n// Create new Ajax request\nconst req = new XMLHttpRequest();\nreq.open('POST', '/path/to/back-end', true);\n\n// Handle the events\nreq.onload = function () {\n    if (req.status \u003e= 200 \u0026\u0026 req.status \u003c 400) {\n        const res = req.responseText;\n        // Do something with the response\n        // ...\n    }\n};\n\n// Send it\nreq.send(formData);\n```\n\nrefs: https://htmldom.dev/paste-an-image-from-the-clipboard/\n","lastmodified":"2023-04-10T09:59:35.521282122Z","tags":["javascript"]}}